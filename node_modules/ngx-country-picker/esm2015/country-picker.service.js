import * as tslib_1 from "tslib";
var CountryPickerService_1;
import { Inject, Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { COUNTRY_PICKER_CONFIG } from './country-picker.config';
let CountryPickerService = CountryPickerService_1 = class CountryPickerService {
    constructor(config, _http) {
        this._http = _http;
        this._data = null;
        this._baseUrl = config.baseUrl;
        this._filename = config.filename;
        this._data = this._loadData();
    }
    static handleError(error) {
        let errMsg;
        if (error instanceof HttpResponse) {
            if (error.status === 404) {
                errMsg = 'Error loading countries.json file.'
                    + ' Please configure WebPack and load countries.json assets to your root folder';
            }
            else {
                const body = error.body || '';
                const err = body.error || JSON.stringify(body);
                errMsg = `${error.status} - ${error.statusText || ''} ${err}`;
            }
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return throwError(errMsg);
    }
    getCountries() {
        return this._data
            .pipe(map((countries) => countries.map((country) => {
            country.name.native[0] = country.name.native[Object.keys(country.name.native)[0]];
            return country;
        })));
    }
    getBaseUrl() {
        return this._baseUrl;
    }
    _loadData() {
        return this._http.get(this._baseUrl + this._filename)
            .pipe(catchError(CountryPickerService_1.handleError));
    }
};
CountryPickerService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [COUNTRY_PICKER_CONFIG,] }] },
    { type: HttpClient }
];
CountryPickerService = CountryPickerService_1 = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(0, Inject(COUNTRY_PICKER_CONFIG))
], CountryPickerService);
export { CountryPickerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1waWNrZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1jb3VudHJ5LXBpY2tlci8iLCJzb3VyY2VzIjpbImNvdW50cnktcGlja2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hFLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUscUJBQXFCLEVBQXVCLE1BQU0seUJBQXlCLENBQUM7QUFJckYsSUFBYSxvQkFBb0IsNEJBQWpDO0lBd0JFLFlBQ2lDLE1BQTJCLEVBQ2xELEtBQWlCO1FBQWpCLFVBQUssR0FBTCxLQUFLLENBQVk7UUF0Qm5CLFVBQUssR0FBa0MsSUFBSSxDQUFDO1FBd0JsRCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUF6QlMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUE4QjtRQUN6RCxJQUFJLE1BQWMsQ0FBQztRQUNuQixJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7WUFDakMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtnQkFDeEIsTUFBTSxHQUFHLG9DQUFvQztzQkFDekMsOEVBQThFLENBQUM7YUFDcEY7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0MsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTSxLQUFLLENBQUMsVUFBVSxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQzthQUMvRDtTQUNGO2FBQU07WUFDTCxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzNEO1FBQ0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBV00sWUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLFNBQXFCLEVBQUUsRUFBRSxDQUM1QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBaUIsRUFBRSxFQUFFO1lBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xGLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FBQztJQUNOLENBQUM7SUFFTSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxTQUFTO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBYSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDOUQsSUFBSSxDQUNILFVBQVUsQ0FBQyxzQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FDN0MsQ0FBQztJQUNOLENBQUM7Q0FDRixDQUFBOzs0Q0E5QkksTUFBTSxTQUFDLHFCQUFxQjtZQUNkLFVBQVU7O0FBMUJoQixvQkFBb0I7SUFEaEMsVUFBVSxFQUFFO0lBMEJSLG1CQUFBLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0dBekJyQixvQkFBb0IsQ0F1RGhDO1NBdkRZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBDT1VOVFJZX1BJQ0tFUl9DT05GSUcsIENvdW50cnlQaWNrZXJDb25maWcgfSBmcm9tICcuL2NvdW50cnktcGlja2VyLmNvbmZpZyc7XG5pbXBvcnQgeyBJQ291bnRyeSB9IGZyb20gJy4vY291bnRyeS5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ291bnRyeVBpY2tlclNlcnZpY2Uge1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Jhc2VVcmw6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBfZmlsZW5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfZGF0YTogT2JzZXJ2YWJsZTxJQ291bnRyeVtdPiB8IG51bGwgPSBudWxsO1xuXG4gIHByb3RlY3RlZCBzdGF0aWMgaGFuZGxlRXJyb3IoZXJyb3I6IEh0dHBSZXNwb25zZTxhbnk+IHwgYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBsZXQgZXJyTXNnOiBzdHJpbmc7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgZXJyTXNnID0gJ0Vycm9yIGxvYWRpbmcgY291bnRyaWVzLmpzb24gZmlsZS4nXG4gICAgICAgICAgKyAnIFBsZWFzZSBjb25maWd1cmUgV2ViUGFjayBhbmQgbG9hZCBjb3VudHJpZXMuanNvbiBhc3NldHMgdG8geW91ciByb290IGZvbGRlcic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBib2R5ID0gZXJyb3IuYm9keSB8fCAnJztcbiAgICAgICAgY29uc3QgZXJyID0gYm9keS5lcnJvciB8fCBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICAgICAgZXJyTXNnID0gYCR7ZXJyb3Iuc3RhdHVzfSAtICR7ZXJyb3Iuc3RhdHVzVGV4dCB8fCAnJ30gJHtlcnJ9YDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZXJyTXNnID0gZXJyb3IubWVzc2FnZSA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvci50b1N0cmluZygpO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgcmV0dXJuIHRocm93RXJyb3IoZXJyTXNnKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoQ09VTlRSWV9QSUNLRVJfQ09ORklHKSBjb25maWc6IENvdW50cnlQaWNrZXJDb25maWcsXG4gICAgcHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudFxuICApIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gY29uZmlnLmJhc2VVcmw7XG4gICAgdGhpcy5fZmlsZW5hbWUgPSBjb25maWcuZmlsZW5hbWU7XG4gICAgdGhpcy5fZGF0YSA9IHRoaXMuX2xvYWREYXRhKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q291bnRyaWVzKCk6IE9ic2VydmFibGU8SUNvdW50cnlbXT4ge1xuICAgIHJldHVybiB0aGlzLl9kYXRhXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKChjb3VudHJpZXM6IElDb3VudHJ5W10pID0+XG4gICAgICAgICAgY291bnRyaWVzLm1hcCgoY291bnRyeTogSUNvdW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvdW50cnkubmFtZS5uYXRpdmVbMF0gPSBjb3VudHJ5Lm5hbWUubmF0aXZlW09iamVjdC5rZXlzKGNvdW50cnkubmFtZS5uYXRpdmUpWzBdXTtcbiAgICAgICAgICAgIHJldHVybiBjb3VudHJ5O1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QmFzZVVybCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9iYXNlVXJsO1xuICB9XG5cbiAgcHJpdmF0ZSBfbG9hZERhdGEoKTogT2JzZXJ2YWJsZTxJQ291bnRyeVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0PElDb3VudHJ5W10+KHRoaXMuX2Jhc2VVcmwgKyB0aGlzLl9maWxlbmFtZSlcbiAgICAgIC5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKENvdW50cnlQaWNrZXJTZXJ2aWNlLmhhbmRsZUVycm9yKVxuICAgICAgKTtcbiAgfVxufVxuIl19